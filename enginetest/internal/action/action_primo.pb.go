// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v5.28.2
// source: github.com/dogmatiq/enginekit/enginetest/internal/action/action.proto

package action

import (
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// TryGetFail returns x.Behavior.Fail if x.Behavior is a [Action_Fail].
// Otherwise, ok is false and v is the zero-value.
func (x *Action) TryGetFail() (v string, ok bool) {
	if x, ok := x.GetBehavior().(*Action_Fail); ok {
		return x.Fail, true
	}
	return v, false
}

// TryGetLog returns x.Behavior.Log if x.Behavior is a [Action_Log].
// Otherwise, ok is false and v is the zero-value.
func (x *Action) TryGetLog() (v string, ok bool) {
	if x, ok := x.GetBehavior().(*Action_Log); ok {
		return x.Log, true
	}
	return v, false
}

// TryGetExecuteCommand returns x.Behavior.ExecuteCommand if x.Behavior is a [Action_ExecuteCommand].
// Otherwise, ok is false and v is the zero-value.
func (x *Action) TryGetExecuteCommand() (v *anypb.Any, ok bool) {
	if x, ok := x.GetBehavior().(*Action_ExecuteCommand); ok {
		return x.ExecuteCommand, true
	}
	return v, false
}

// TryGetRecordEvent returns x.Behavior.RecordEvent if x.Behavior is a [Action_RecordEvent].
// Otherwise, ok is false and v is the zero-value.
func (x *Action) TryGetRecordEvent() (v *anypb.Any, ok bool) {
	if x, ok := x.GetBehavior().(*Action_RecordEvent); ok {
		return x.RecordEvent, true
	}
	return v, false
}

// TryGetScheduleTimeout returns x.Behavior.ScheduleTimeout if x.Behavior is a [Action_ScheduleTimeout].
// Otherwise, ok is false and v is the zero-value.
func (x *Action) TryGetScheduleTimeout() (v *ScheduleTimeoutDetails, ok bool) {
	if x, ok := x.GetBehavior().(*Action_ScheduleTimeout); ok {
		return x.ScheduleTimeout, true
	}
	return v, false
}

// TryGetDestroy returns x.Behavior.Destroy if x.Behavior is a [Action_Destroy].
// Otherwise, ok is false and v is the zero-value.
func (x *Action) TryGetDestroy() (v *Empty, ok bool) {
	if x, ok := x.GetBehavior().(*Action_Destroy); ok {
		return x.Destroy, true
	}
	return v, false
}

// TryGetEnd returns x.Behavior.End if x.Behavior is a [Action_End].
// Otherwise, ok is false and v is the zero-value.
func (x *Action) TryGetEnd() (v *Empty, ok bool) {
	if x, ok := x.GetBehavior().(*Action_End); ok {
		return x.End, true
	}
	return v, false
}

type ActionBuilder struct {
	prototype Action
}

// NewActionBuilder returns a builder that constructs [Action] messages.
func NewActionBuilder() *ActionBuilder {
	return &ActionBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ActionBuilder) From(x *Action) *ActionBuilder {
	b.prototype.Behavior = x.Behavior
	return b
}

// Build returns a new [Action] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ActionBuilder) Build() *Action {
	return &Action{
		Behavior: b.prototype.Behavior,
	}
}

// WithFail configures the builder to set the Behavior field to a
// [Action_Fail] value containing v, then returns b
func (b *ActionBuilder) WithFail(v string) *ActionBuilder {
	b.prototype.Behavior = &Action_Fail{Fail: v}
	return b
}

// WithLog configures the builder to set the Behavior field to a
// [Action_Log] value containing v, then returns b
func (b *ActionBuilder) WithLog(v string) *ActionBuilder {
	b.prototype.Behavior = &Action_Log{Log: v}
	return b
}

// WithExecuteCommand configures the builder to set the Behavior field to a
// [Action_ExecuteCommand] value containing v, then returns b
func (b *ActionBuilder) WithExecuteCommand(v *anypb.Any) *ActionBuilder {
	b.prototype.Behavior = &Action_ExecuteCommand{ExecuteCommand: v}
	return b
}

// WithRecordEvent configures the builder to set the Behavior field to a
// [Action_RecordEvent] value containing v, then returns b
func (b *ActionBuilder) WithRecordEvent(v *anypb.Any) *ActionBuilder {
	b.prototype.Behavior = &Action_RecordEvent{RecordEvent: v}
	return b
}

// WithScheduleTimeout configures the builder to set the Behavior field to a
// [Action_ScheduleTimeout] value containing v, then returns b
func (b *ActionBuilder) WithScheduleTimeout(v *ScheduleTimeoutDetails) *ActionBuilder {
	b.prototype.Behavior = &Action_ScheduleTimeout{ScheduleTimeout: v}
	return b
}

// WithDestroy configures the builder to set the Behavior field to a
// [Action_Destroy] value containing v, then returns b
func (b *ActionBuilder) WithDestroy(v *Empty) *ActionBuilder {
	b.prototype.Behavior = &Action_Destroy{Destroy: v}
	return b
}

// WithEnd configures the builder to set the Behavior field to a
// [Action_End] value containing v, then returns b
func (b *ActionBuilder) WithEnd(v *Empty) *ActionBuilder {
	b.prototype.Behavior = &Action_End{End: v}
	return b
}

type ScheduleTimeoutDetailsBuilder struct {
	prototype ScheduleTimeoutDetails
}

// NewScheduleTimeoutDetailsBuilder returns a builder that constructs [ScheduleTimeoutDetails] messages.
func NewScheduleTimeoutDetailsBuilder() *ScheduleTimeoutDetailsBuilder {
	return &ScheduleTimeoutDetailsBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ScheduleTimeoutDetailsBuilder) From(x *ScheduleTimeoutDetails) *ScheduleTimeoutDetailsBuilder {
	b.prototype.Timeout = x.Timeout
	b.prototype.At = x.At
	return b
}

// Build returns a new [ScheduleTimeoutDetails] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ScheduleTimeoutDetailsBuilder) Build() *ScheduleTimeoutDetails {
	return &ScheduleTimeoutDetails{
		Timeout: b.prototype.Timeout,
		At:      b.prototype.At,
	}
}

// WithTimeout configures the builder to set the Timeout field to v,
// then returns b.
func (b *ScheduleTimeoutDetailsBuilder) WithTimeout(v *anypb.Any) *ScheduleTimeoutDetailsBuilder {
	b.prototype.Timeout = v
	return b
}

// WithAt configures the builder to set the At field to v,
// then returns b.
func (b *ScheduleTimeoutDetailsBuilder) WithAt(v *timestamppb.Timestamp) *ScheduleTimeoutDetailsBuilder {
	b.prototype.At = v
	return b
}

type EmptyBuilder struct {
	prototype Empty
}

// NewEmptyBuilder returns a builder that constructs [Empty] messages.
func NewEmptyBuilder() *EmptyBuilder {
	return &EmptyBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *EmptyBuilder) From(x *Empty) *EmptyBuilder {
	return b
}

// Build returns a new [Empty] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *EmptyBuilder) Build() *Empty {
	return &Empty{}
}

// MustSwitch_Action_Behavior invokes one of the given functions based on
// the value of x.Behavior.
//
// It panics if x.Behavior is nil.
func MustSwitch_Action_Behavior(
	x *Action,
	caseFail func(string),
	caseLog func(string),
	caseExecuteCommand func(*anypb.Any),
	caseRecordEvent func(*anypb.Any),
	caseScheduleTimeout func(*ScheduleTimeoutDetails),
	caseDestroy func(*Empty),
	caseEnd func(*Empty),
) {
	switch v := x.GetBehavior().(type) {
	case *Action_Fail:
		caseFail(v.Fail)
	case *Action_Log:
		caseLog(v.Log)
	case *Action_ExecuteCommand:
		caseExecuteCommand(v.ExecuteCommand)
	case *Action_RecordEvent:
		caseRecordEvent(v.RecordEvent)
	case *Action_ScheduleTimeout:
		caseScheduleTimeout(v.ScheduleTimeout)
	case *Action_Destroy:
		caseDestroy(v.Destroy)
	case *Action_End:
		caseEnd(v.End)
	default:
		panic("MustSwitch_Action_Behavior: x.Behavior is nil")
	}
}

// Switch_Action_Behavior invokes one of the given functions based on
// the value of x.Behavior.
//
// It calls none() if x.Behavior is nil.
func Switch_Action_Behavior(
	x *Action,
	caseFail func(string),
	caseLog func(string),
	caseExecuteCommand func(*anypb.Any),
	caseRecordEvent func(*anypb.Any),
	caseScheduleTimeout func(*ScheduleTimeoutDetails),
	caseDestroy func(*Empty),
	caseEnd func(*Empty),
	none func(),
) {
	switch v := x.GetBehavior().(type) {
	case *Action_Fail:
		caseFail(v.Fail)
	case *Action_Log:
		caseLog(v.Log)
	case *Action_ExecuteCommand:
		caseExecuteCommand(v.ExecuteCommand)
	case *Action_RecordEvent:
		caseRecordEvent(v.RecordEvent)
	case *Action_ScheduleTimeout:
		caseScheduleTimeout(v.ScheduleTimeout)
	case *Action_Destroy:
		caseDestroy(v.Destroy)
	case *Action_End:
		caseEnd(v.End)
	default:
		none()
	}
}

// MustMap_Action_Behavior maps x.Behavior to a value of type T by invoking
// one of the given functions.
//
// It invokes the function that corresponds to the value of x.Behavior,
// and returns that function's result. It panics if x.Behavior is nil.
func MustMap_Action_Behavior[T any](
	x *Action,
	caseFail func(string) T,
	caseLog func(string) T,
	caseExecuteCommand func(*anypb.Any) T,
	caseRecordEvent func(*anypb.Any) T,
	caseScheduleTimeout func(*ScheduleTimeoutDetails) T,
	caseDestroy func(*Empty) T,
	caseEnd func(*Empty) T,
) T {
	switch v := x.GetBehavior().(type) {
	case *Action_Fail:
		return caseFail(v.Fail)
	case *Action_Log:
		return caseLog(v.Log)
	case *Action_ExecuteCommand:
		return caseExecuteCommand(v.ExecuteCommand)
	case *Action_RecordEvent:
		return caseRecordEvent(v.RecordEvent)
	case *Action_ScheduleTimeout:
		return caseScheduleTimeout(v.ScheduleTimeout)
	case *Action_Destroy:
		return caseDestroy(v.Destroy)
	case *Action_End:
		return caseEnd(v.End)
	default:
		panic("MustMap_Action_Behavior: x.Behavior is nil")
	}
}

// Map_Action_Behavior maps x.Behavior to a value of type T by invoking
// one of the given functions.
//
// It invokes the function that corresponds to the value of x.Behavior,
// and returns that function's result. It calls none() if x.Behavior is nil.
func Map_Action_Behavior[T any](
	x *Action,
	caseFail func(string) T,
	caseLog func(string) T,
	caseExecuteCommand func(*anypb.Any) T,
	caseRecordEvent func(*anypb.Any) T,
	caseScheduleTimeout func(*ScheduleTimeoutDetails) T,
	caseDestroy func(*Empty) T,
	caseEnd func(*Empty) T,
	none func() T,
) T {
	switch v := x.GetBehavior().(type) {
	case *Action_Fail:
		return caseFail(v.Fail)
	case *Action_Log:
		return caseLog(v.Log)
	case *Action_ExecuteCommand:
		return caseExecuteCommand(v.ExecuteCommand)
	case *Action_RecordEvent:
		return caseRecordEvent(v.RecordEvent)
	case *Action_ScheduleTimeout:
		return caseScheduleTimeout(v.ScheduleTimeout)
	case *Action_Destroy:
		return caseDestroy(v.Destroy)
	case *Action_End:
		return caseEnd(v.End)
	default:
		return none()
	}
}

// SetFail sets the x.Behavior field to a [Action_Fail] value containing v,
// then returns x.
func (x *Action) SetFail(v string) {
	x.Behavior = &Action_Fail{Fail: v}
}

// SetLog sets the x.Behavior field to a [Action_Log] value containing v,
// then returns x.
func (x *Action) SetLog(v string) {
	x.Behavior = &Action_Log{Log: v}
}

// SetExecuteCommand sets the x.Behavior field to a [Action_ExecuteCommand] value containing v,
// then returns x.
func (x *Action) SetExecuteCommand(v *anypb.Any) {
	x.Behavior = &Action_ExecuteCommand{ExecuteCommand: v}
}

// SetRecordEvent sets the x.Behavior field to a [Action_RecordEvent] value containing v,
// then returns x.
func (x *Action) SetRecordEvent(v *anypb.Any) {
	x.Behavior = &Action_RecordEvent{RecordEvent: v}
}

// SetScheduleTimeout sets the x.Behavior field to a [Action_ScheduleTimeout] value containing v,
// then returns x.
func (x *Action) SetScheduleTimeout(v *ScheduleTimeoutDetails) {
	x.Behavior = &Action_ScheduleTimeout{ScheduleTimeout: v}
}

// SetDestroy sets the x.Behavior field to a [Action_Destroy] value containing v,
// then returns x.
func (x *Action) SetDestroy(v *Empty) {
	x.Behavior = &Action_Destroy{Destroy: v}
}

// SetEnd sets the x.Behavior field to a [Action_End] value containing v,
// then returns x.
func (x *Action) SetEnd(v *Empty) {
	x.Behavior = &Action_End{End: v}
}

// SetTimeout sets the x.Timeout field to v, then returns x.
func (x *ScheduleTimeoutDetails) SetTimeout(v *anypb.Any) {
	x.Timeout = v
}

// SetAt sets the x.At field to v, then returns x.
func (x *ScheduleTimeoutDetails) SetAt(v *timestamppb.Timestamp) {
	x.At = v
}

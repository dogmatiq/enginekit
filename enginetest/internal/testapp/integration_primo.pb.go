// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v5.27.2
// source: github.com/dogmatiq/enginekit/enginetest/internal/testapp/integration.proto

package testapp

import action "github.com/dogmatiq/enginekit/enginetest/internal/action"

type IntegrationCommandABuilder struct {
	prototype IntegrationCommandA
}

// NewIntegrationCommandABuilder returns a builder that constructs [IntegrationCommandA] messages.
func NewIntegrationCommandABuilder() *IntegrationCommandABuilder {
	return &IntegrationCommandABuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *IntegrationCommandABuilder) From(x *IntegrationCommandA) *IntegrationCommandABuilder {
	b.prototype.IsInvalid = x.IsInvalid
	b.prototype.Actions = x.Actions
	return b
}

// Build returns a new [IntegrationCommandA] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *IntegrationCommandABuilder) Build() *IntegrationCommandA {
	return &IntegrationCommandA{
		IsInvalid: b.prototype.IsInvalid,
		Actions:   b.prototype.Actions,
	}
}

// WithIsInvalid configures the builder to set the IsInvalid field to v,
// then returns b.
func (b *IntegrationCommandABuilder) WithIsInvalid(v bool) *IntegrationCommandABuilder {
	b.prototype.IsInvalid = v
	return b
}

// WithActions configures the builder to set the Actions field to v,
// then returns b.
func (b *IntegrationCommandABuilder) WithActions(v []*action.Action) *IntegrationCommandABuilder {
	b.prototype.Actions = v
	return b
}

type IntegrationCommandBBuilder struct {
	prototype IntegrationCommandB
}

// NewIntegrationCommandBBuilder returns a builder that constructs [IntegrationCommandB] messages.
func NewIntegrationCommandBBuilder() *IntegrationCommandBBuilder {
	return &IntegrationCommandBBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *IntegrationCommandBBuilder) From(x *IntegrationCommandB) *IntegrationCommandBBuilder {
	b.prototype.IsInvalid = x.IsInvalid
	b.prototype.Actions = x.Actions
	return b
}

// Build returns a new [IntegrationCommandB] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *IntegrationCommandBBuilder) Build() *IntegrationCommandB {
	return &IntegrationCommandB{
		IsInvalid: b.prototype.IsInvalid,
		Actions:   b.prototype.Actions,
	}
}

// WithIsInvalid configures the builder to set the IsInvalid field to v,
// then returns b.
func (b *IntegrationCommandBBuilder) WithIsInvalid(v bool) *IntegrationCommandBBuilder {
	b.prototype.IsInvalid = v
	return b
}

// WithActions configures the builder to set the Actions field to v,
// then returns b.
func (b *IntegrationCommandBBuilder) WithActions(v []*action.Action) *IntegrationCommandBBuilder {
	b.prototype.Actions = v
	return b
}

type IntegrationEventABuilder struct {
	prototype IntegrationEventA
}

// NewIntegrationEventABuilder returns a builder that constructs [IntegrationEventA] messages.
func NewIntegrationEventABuilder() *IntegrationEventABuilder {
	return &IntegrationEventABuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *IntegrationEventABuilder) From(x *IntegrationEventA) *IntegrationEventABuilder {
	b.prototype.Value = x.Value
	return b
}

// Build returns a new [IntegrationEventA] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *IntegrationEventABuilder) Build() *IntegrationEventA {
	return &IntegrationEventA{
		Value: b.prototype.Value,
	}
}

// WithValue configures the builder to set the Value field to v,
// then returns b.
func (b *IntegrationEventABuilder) WithValue(v string) *IntegrationEventABuilder {
	b.prototype.Value = v
	return b
}

type IntegrationEventBBuilder struct {
	prototype IntegrationEventB
}

// NewIntegrationEventBBuilder returns a builder that constructs [IntegrationEventB] messages.
func NewIntegrationEventBBuilder() *IntegrationEventBBuilder {
	return &IntegrationEventBBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *IntegrationEventBBuilder) From(x *IntegrationEventB) *IntegrationEventBBuilder {
	b.prototype.Value = x.Value
	return b
}

// Build returns a new [IntegrationEventB] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *IntegrationEventBBuilder) Build() *IntegrationEventB {
	return &IntegrationEventB{
		Value: b.prototype.Value,
	}
}

// WithValue configures the builder to set the Value field to v,
// then returns b.
func (b *IntegrationEventBBuilder) WithValue(v string) *IntegrationEventBBuilder {
	b.prototype.Value = v
	return b
}

// SetIsInvalid sets the x.IsInvalid field to v, then returns x.
func (x *IntegrationCommandA) SetIsInvalid(v bool) {
	x.IsInvalid = v
}

// SetActions sets the x.Actions field to v, then returns x.
func (x *IntegrationCommandA) SetActions(v []*action.Action) {
	x.Actions = v
}

// SetIsInvalid sets the x.IsInvalid field to v, then returns x.
func (x *IntegrationCommandB) SetIsInvalid(v bool) {
	x.IsInvalid = v
}

// SetActions sets the x.Actions field to v, then returns x.
func (x *IntegrationCommandB) SetActions(v []*action.Action) {
	x.Actions = v
}

// SetValue sets the x.Value field to v, then returns x.
func (x *IntegrationEventA) SetValue(v string) {
	x.Value = v
}

// SetValue sets the x.Value field to v, then returns x.
func (x *IntegrationEventB) SetValue(v string) {
	x.Value = v
}

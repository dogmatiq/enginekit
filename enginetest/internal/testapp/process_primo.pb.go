// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v6.32.0
// source: github.com/dogmatiq/enginekit/enginetest/internal/testapp/process.proto

package testapp

import (
	action "github.com/dogmatiq/enginekit/enginetest/internal/action"
	proto "google.golang.org/protobuf/proto"
)

type ProcessEventABuilder struct {
	prototype ProcessEventA
}

// NewProcessEventABuilder returns a builder that constructs [ProcessEventA] messages.
func NewProcessEventABuilder() *ProcessEventABuilder {
	return &ProcessEventABuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ProcessEventABuilder) From(x *ProcessEventA) *ProcessEventABuilder {
	b.prototype.InstanceId = x.InstanceId
	b.prototype.Actions = x.Actions
	return b
}

// Build returns a new [ProcessEventA] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ProcessEventABuilder) Build() *ProcessEventA {
	return &ProcessEventA{
		InstanceId: b.prototype.InstanceId,
		Actions:    b.prototype.Actions,
	}
}

// WithInstanceId configures the builder to set the InstanceId field to v,
// then returns b.
func (b *ProcessEventABuilder) WithInstanceId(v string) *ProcessEventABuilder {
	b.prototype.InstanceId = v
	return b
}

// WithActions configures the builder to set the Actions field to v,
// then returns b.
func (b *ProcessEventABuilder) WithActions(v []*action.Action) *ProcessEventABuilder {
	b.prototype.Actions = v
	return b
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*ProcessEventA] to implement [encoding.BinaryMarshaler].
func (x *ProcessEventA) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*ProcessEventA] to implement [encoding.BinaryUnmarshaler].
func (x *ProcessEventA) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// SetInstanceId sets the x.InstanceId field to v, then returns x.
func (x *ProcessEventA) SetInstanceId(v string) {
	x.InstanceId = v
}

// SetActions sets the x.Actions field to v, then returns x.
func (x *ProcessEventA) SetActions(v []*action.Action) {
	x.Actions = v
}

// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v5.26.0
// source: github.com/dogmatiq/enginekit/grpc/eventstreamgrpc/consume.proto

package eventstreamgrpc

import (
	envelopepb "github.com/dogmatiq/enginekit/protobuf/envelopepb"
	uuidpb "github.com/dogmatiq/enginekit/protobuf/uuidpb"
)

type ListRequestBuilder struct {
	prototype ListRequest
}

// NewListRequestBuilder returns a builder that constructs [ListRequest] messages.
func NewListRequestBuilder() *ListRequestBuilder {
	return &ListRequestBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ListRequestBuilder) From(x *ListRequest) *ListRequestBuilder {
	return b
}

// Build returns a new [ListRequest] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ListRequestBuilder) Build() *ListRequest {
	return &ListRequest{}
}

type ListResponseBuilder struct {
	prototype ListResponse
}

// NewListResponseBuilder returns a builder that constructs [ListResponse] messages.
func NewListResponseBuilder() *ListResponseBuilder {
	return &ListResponseBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ListResponseBuilder) From(x *ListResponse) *ListResponseBuilder {
	b.prototype.Streams = x.Streams
	return b
}

// Build returns a new [ListResponse] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ListResponseBuilder) Build() *ListResponse {
	return &ListResponse{
		Streams: b.prototype.Streams,
	}
}

// WithStreams configures the builder to set the Streams field to v,
// then returns b.
func (b *ListResponseBuilder) WithStreams(v []*Stream) *ListResponseBuilder {
	b.prototype.Streams = v
	return b
}

type StreamBuilder struct {
	prototype Stream
}

// NewStreamBuilder returns a builder that constructs [Stream] messages.
func NewStreamBuilder() *StreamBuilder {
	return &StreamBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *StreamBuilder) From(x *Stream) *StreamBuilder {
	b.prototype.StreamId = x.StreamId
	b.prototype.EventTypes = x.EventTypes
	return b
}

// Build returns a new [Stream] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *StreamBuilder) Build() *Stream {
	return &Stream{
		StreamId:   b.prototype.StreamId,
		EventTypes: b.prototype.EventTypes,
	}
}

// WithStreamId configures the builder to set the StreamId field to v,
// then returns b.
func (b *StreamBuilder) WithStreamId(v *uuidpb.UUID) *StreamBuilder {
	b.prototype.StreamId = v
	return b
}

// WithEventTypes configures the builder to set the EventTypes field to v,
// then returns b.
func (b *StreamBuilder) WithEventTypes(v []*EventType) *StreamBuilder {
	b.prototype.EventTypes = v
	return b
}

type ConsumeRequestBuilder struct {
	prototype ConsumeRequest
}

// NewConsumeRequestBuilder returns a builder that constructs [ConsumeRequest] messages.
func NewConsumeRequestBuilder() *ConsumeRequestBuilder {
	return &ConsumeRequestBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ConsumeRequestBuilder) From(x *ConsumeRequest) *ConsumeRequestBuilder {
	b.prototype.StreamId = x.StreamId
	b.prototype.Offset = x.Offset
	b.prototype.EventTypes = x.EventTypes
	return b
}

// Build returns a new [ConsumeRequest] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ConsumeRequestBuilder) Build() *ConsumeRequest {
	return &ConsumeRequest{
		StreamId:   b.prototype.StreamId,
		Offset:     b.prototype.Offset,
		EventTypes: b.prototype.EventTypes,
	}
}

// WithStreamId configures the builder to set the StreamId field to v,
// then returns b.
func (b *ConsumeRequestBuilder) WithStreamId(v *uuidpb.UUID) *ConsumeRequestBuilder {
	b.prototype.StreamId = v
	return b
}

// WithOffset configures the builder to set the Offset field to v,
// then returns b.
func (b *ConsumeRequestBuilder) WithOffset(v uint64) *ConsumeRequestBuilder {
	b.prototype.Offset = v
	return b
}

// WithEventTypes configures the builder to set the EventTypes field to v,
// then returns b.
func (b *ConsumeRequestBuilder) WithEventTypes(v []*EventType) *ConsumeRequestBuilder {
	b.prototype.EventTypes = v
	return b
}

type ConsumeResponseBuilder struct {
	prototype ConsumeResponse
}

// NewConsumeResponseBuilder returns a builder that constructs [ConsumeResponse] messages.
func NewConsumeResponseBuilder() *ConsumeResponseBuilder {
	return &ConsumeResponseBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ConsumeResponseBuilder) From(x *ConsumeResponse) *ConsumeResponseBuilder {
	b.prototype.Offset = x.Offset
	b.prototype.Event = x.Event
	return b
}

// Build returns a new [ConsumeResponse] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ConsumeResponseBuilder) Build() *ConsumeResponse {
	return &ConsumeResponse{
		Offset: b.prototype.Offset,
		Event:  b.prototype.Event,
	}
}

// WithOffset configures the builder to set the Offset field to v,
// then returns b.
func (b *ConsumeResponseBuilder) WithOffset(v uint64) *ConsumeResponseBuilder {
	b.prototype.Offset = v
	return b
}

// WithEvent configures the builder to set the Event field to v,
// then returns b.
func (b *ConsumeResponseBuilder) WithEvent(v *envelopepb.Envelope) *ConsumeResponseBuilder {
	b.prototype.Event = v
	return b
}

type EventTypeBuilder struct {
	prototype EventType
}

// NewEventTypeBuilder returns a builder that constructs [EventType] messages.
func NewEventTypeBuilder() *EventTypeBuilder {
	return &EventTypeBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *EventTypeBuilder) From(x *EventType) *EventTypeBuilder {
	b.prototype.PortableName = x.PortableName
	b.prototype.MediaTypes = x.MediaTypes
	return b
}

// Build returns a new [EventType] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *EventTypeBuilder) Build() *EventType {
	return &EventType{
		PortableName: b.prototype.PortableName,
		MediaTypes:   b.prototype.MediaTypes,
	}
}

// WithPortableName configures the builder to set the PortableName field to v,
// then returns b.
func (b *EventTypeBuilder) WithPortableName(v string) *EventTypeBuilder {
	b.prototype.PortableName = v
	return b
}

// WithMediaTypes configures the builder to set the MediaTypes field to v,
// then returns b.
func (b *EventTypeBuilder) WithMediaTypes(v []string) *EventTypeBuilder {
	b.prototype.MediaTypes = v
	return b
}

type UnrecognizedStreamBuilder struct {
	prototype UnrecognizedStream
}

// NewUnrecognizedStreamBuilder returns a builder that constructs [UnrecognizedStream] messages.
func NewUnrecognizedStreamBuilder() *UnrecognizedStreamBuilder {
	return &UnrecognizedStreamBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *UnrecognizedStreamBuilder) From(x *UnrecognizedStream) *UnrecognizedStreamBuilder {
	b.prototype.StreamId = x.StreamId
	return b
}

// Build returns a new [UnrecognizedStream] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *UnrecognizedStreamBuilder) Build() *UnrecognizedStream {
	return &UnrecognizedStream{
		StreamId: b.prototype.StreamId,
	}
}

// WithStreamId configures the builder to set the StreamId field to v,
// then returns b.
func (b *UnrecognizedStreamBuilder) WithStreamId(v *uuidpb.UUID) *UnrecognizedStreamBuilder {
	b.prototype.StreamId = v
	return b
}

type NoEventTypesBuilder struct {
	prototype NoEventTypes
}

// NewNoEventTypesBuilder returns a builder that constructs [NoEventTypes] messages.
func NewNoEventTypesBuilder() *NoEventTypesBuilder {
	return &NoEventTypesBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *NoEventTypesBuilder) From(x *NoEventTypes) *NoEventTypesBuilder {
	return b
}

// Build returns a new [NoEventTypes] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *NoEventTypesBuilder) Build() *NoEventTypes {
	return &NoEventTypes{}
}

type UnrecognizedEventTypeBuilder struct {
	prototype UnrecognizedEventType
}

// NewUnrecognizedEventTypeBuilder returns a builder that constructs [UnrecognizedEventType] messages.
func NewUnrecognizedEventTypeBuilder() *UnrecognizedEventTypeBuilder {
	return &UnrecognizedEventTypeBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *UnrecognizedEventTypeBuilder) From(x *UnrecognizedEventType) *UnrecognizedEventTypeBuilder {
	b.prototype.PortableName = x.PortableName
	return b
}

// Build returns a new [UnrecognizedEventType] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *UnrecognizedEventTypeBuilder) Build() *UnrecognizedEventType {
	return &UnrecognizedEventType{
		PortableName: b.prototype.PortableName,
	}
}

// WithPortableName configures the builder to set the PortableName field to v,
// then returns b.
func (b *UnrecognizedEventTypeBuilder) WithPortableName(v string) *UnrecognizedEventTypeBuilder {
	b.prototype.PortableName = v
	return b
}

type NoRecognizedMediaTypesBuilder struct {
	prototype NoRecognizedMediaTypes
}

// NewNoRecognizedMediaTypesBuilder returns a builder that constructs [NoRecognizedMediaTypes] messages.
func NewNoRecognizedMediaTypesBuilder() *NoRecognizedMediaTypesBuilder {
	return &NoRecognizedMediaTypesBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *NoRecognizedMediaTypesBuilder) From(x *NoRecognizedMediaTypes) *NoRecognizedMediaTypesBuilder {
	b.prototype.PortableName = x.PortableName
	return b
}

// Build returns a new [NoRecognizedMediaTypes] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *NoRecognizedMediaTypesBuilder) Build() *NoRecognizedMediaTypes {
	return &NoRecognizedMediaTypes{
		PortableName: b.prototype.PortableName,
	}
}

// WithPortableName configures the builder to set the PortableName field to v,
// then returns b.
func (b *NoRecognizedMediaTypesBuilder) WithPortableName(v string) *NoRecognizedMediaTypesBuilder {
	b.prototype.PortableName = v
	return b
}

// SetStreams sets the x.Streams field to v, then returns x.
func (x *ListResponse) SetStreams(v []*Stream) {
	x.Streams = v
}

// SetStreamId sets the x.StreamId field to v, then returns x.
func (x *Stream) SetStreamId(v *uuidpb.UUID) {
	x.StreamId = v
}

// SetEventTypes sets the x.EventTypes field to v, then returns x.
func (x *Stream) SetEventTypes(v []*EventType) {
	x.EventTypes = v
}

// SetStreamId sets the x.StreamId field to v, then returns x.
func (x *ConsumeRequest) SetStreamId(v *uuidpb.UUID) {
	x.StreamId = v
}

// SetOffset sets the x.Offset field to v, then returns x.
func (x *ConsumeRequest) SetOffset(v uint64) {
	x.Offset = v
}

// SetEventTypes sets the x.EventTypes field to v, then returns x.
func (x *ConsumeRequest) SetEventTypes(v []*EventType) {
	x.EventTypes = v
}

// SetOffset sets the x.Offset field to v, then returns x.
func (x *ConsumeResponse) SetOffset(v uint64) {
	x.Offset = v
}

// SetEvent sets the x.Event field to v, then returns x.
func (x *ConsumeResponse) SetEvent(v *envelopepb.Envelope) {
	x.Event = v
}

// SetPortableName sets the x.PortableName field to v, then returns x.
func (x *EventType) SetPortableName(v string) {
	x.PortableName = v
}

// SetMediaTypes sets the x.MediaTypes field to v, then returns x.
func (x *EventType) SetMediaTypes(v []string) {
	x.MediaTypes = v
}

// SetStreamId sets the x.StreamId field to v, then returns x.
func (x *UnrecognizedStream) SetStreamId(v *uuidpb.UUID) {
	x.StreamId = v
}

// SetPortableName sets the x.PortableName field to v, then returns x.
func (x *UnrecognizedEventType) SetPortableName(v string) {
	x.PortableName = v
}

// SetPortableName sets the x.PortableName field to v, then returns x.
func (x *NoRecognizedMediaTypes) SetPortableName(v string) {
	x.PortableName = v
}

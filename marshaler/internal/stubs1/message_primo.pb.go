// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v6.32.0
// source: github.com/dogmatiq/enginekit/marshaler/internal/stubs1/message.proto

package stubs1

import proto "google.golang.org/protobuf/proto"

type ProtoMessageBuilder struct {
	prototype ProtoMessage
}

// NewProtoMessageBuilder returns a builder that constructs [ProtoMessage] messages.
func NewProtoMessageBuilder() *ProtoMessageBuilder {
	return &ProtoMessageBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ProtoMessageBuilder) From(x *ProtoMessage) *ProtoMessageBuilder {
	b.prototype.Value = x.Value
	return b
}

// Build returns a new [ProtoMessage] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ProtoMessageBuilder) Build() *ProtoMessage {
	return &ProtoMessage{
		Value: b.prototype.Value,
	}
}

// WithValue configures the builder to set the Value field to v,
// then returns b.
func (b *ProtoMessageBuilder) WithValue(v string) *ProtoMessageBuilder {
	b.prototype.Value = v
	return b
}

// MarshalBinary returns the binary representation of the message, equivalent to
// calling proto.Marshal(x).
//
// It allows [*ProtoMessage] to implement [encoding.BinaryMarshaler].
func (x *ProtoMessage) MarshalBinary() ([]byte, error) {
	return proto.Marshal(x)
}

// UnmarshalBinary populates x from its binary representation, equivalent to
// calling proto.Unmarshal(data, x).
//
// It allows [*ProtoMessage] to implement [encoding.BinaryUnmarshaler].
func (x *ProtoMessage) UnmarshalBinary(data []byte) error {
	return proto.Unmarshal(data, x)
}

// SetValue sets the x.Value field to v, then returns x.
func (x *ProtoMessage) SetValue(v string) {
	x.Value = v
}

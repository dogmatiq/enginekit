// Code generated by protoc-gen-go-primo. DO NOT EDIT.
// versions:
// 	protoc-gen-go-primo v
// 	protoc              v5.28.2
// source: github.com/dogmatiq/enginekit/protobuf/configpb/config.proto

package configpb

import (
	"fmt"
	identitypb "github.com/dogmatiq/enginekit/protobuf/identitypb"
)

type ApplicationBuilder struct {
	prototype Application
}

// NewApplicationBuilder returns a builder that constructs [Application] messages.
func NewApplicationBuilder() *ApplicationBuilder {
	return &ApplicationBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *ApplicationBuilder) From(x *Application) *ApplicationBuilder {
	b.prototype.Identity = x.Identity
	b.prototype.GoType = x.GoType
	b.prototype.Handlers = x.Handlers
	return b
}

// Build returns a new [Application] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *ApplicationBuilder) Build() *Application {
	return &Application{
		Identity: b.prototype.Identity,
		GoType:   b.prototype.GoType,
		Handlers: b.prototype.Handlers,
	}
}

// WithIdentity configures the builder to set the Identity field to v,
// then returns b.
func (b *ApplicationBuilder) WithIdentity(v *identitypb.Identity) *ApplicationBuilder {
	b.prototype.Identity = v
	return b
}

// WithGoType configures the builder to set the GoType field to v,
// then returns b.
func (b *ApplicationBuilder) WithGoType(v string) *ApplicationBuilder {
	b.prototype.GoType = v
	return b
}

// WithHandlers configures the builder to set the Handlers field to v,
// then returns b.
func (b *ApplicationBuilder) WithHandlers(v []*Handler) *ApplicationBuilder {
	b.prototype.Handlers = v
	return b
}

type HandlerBuilder struct {
	prototype Handler
}

// NewHandlerBuilder returns a builder that constructs [Handler] messages.
func NewHandlerBuilder() *HandlerBuilder {
	return &HandlerBuilder{}
}

// From configures the builder to use x as the prototype for new messages,
// then returns b.
//
// It performs a shallow copy of x, such that any changes made via the builder
// do not modify x. It does not make a copy of the field values themselves.
func (b *HandlerBuilder) From(x *Handler) *HandlerBuilder {
	b.prototype.Identity = x.Identity
	b.prototype.GoType = x.GoType
	b.prototype.Type = x.Type
	b.prototype.ProducedMessages = x.ProducedMessages
	b.prototype.ConsumedMessages = x.ConsumedMessages
	b.prototype.IsDisabled = x.IsDisabled
	return b
}

// Build returns a new [Handler] containing the values configured via the builder.
//
// Each call returns a new message, such that future changes to the builder do
// not modify previously constructed messages.
func (b *HandlerBuilder) Build() *Handler {
	return &Handler{
		Identity:         b.prototype.Identity,
		GoType:           b.prototype.GoType,
		Type:             b.prototype.Type,
		ProducedMessages: b.prototype.ProducedMessages,
		ConsumedMessages: b.prototype.ConsumedMessages,
		IsDisabled:       b.prototype.IsDisabled,
	}
}

// WithIdentity configures the builder to set the Identity field to v,
// then returns b.
func (b *HandlerBuilder) WithIdentity(v *identitypb.Identity) *HandlerBuilder {
	b.prototype.Identity = v
	return b
}

// WithGoType configures the builder to set the GoType field to v,
// then returns b.
func (b *HandlerBuilder) WithGoType(v string) *HandlerBuilder {
	b.prototype.GoType = v
	return b
}

// WithType configures the builder to set the Type field to v,
// then returns b.
func (b *HandlerBuilder) WithType(v HandlerType) *HandlerBuilder {
	b.prototype.Type = v
	return b
}

// WithProducedMessages configures the builder to set the ProducedMessages field to v,
// then returns b.
func (b *HandlerBuilder) WithProducedMessages(v map[string]MessageKind) *HandlerBuilder {
	b.prototype.ProducedMessages = v
	return b
}

// WithConsumedMessages configures the builder to set the ConsumedMessages field to v,
// then returns b.
func (b *HandlerBuilder) WithConsumedMessages(v map[string]MessageKind) *HandlerBuilder {
	b.prototype.ConsumedMessages = v
	return b
}

// WithIsDisabled configures the builder to set the IsDisabled field to v,
// then returns b.
func (b *HandlerBuilder) WithIsDisabled(v bool) *HandlerBuilder {
	b.prototype.IsDisabled = v
	return b
}

type (
	// MessageKind_UNKNOWN_MESSAGE_KIND_Case is a type that statically associates a function
	// with a [MessageKind_UNKNOWN_MESSAGE_KIND] value.
	MessageKind_UNKNOWN_MESSAGE_KIND_Case struct{}
	// MessageKind_COMMAND_Case is a type that statically associates a function
	// with a [MessageKind_COMMAND] value.
	MessageKind_COMMAND_Case struct{}
	// MessageKind_EVENT_Case is a type that statically associates a function
	// with a [MessageKind_EVENT] value.
	MessageKind_EVENT_Case struct{}
	// MessageKind_TIMEOUT_Case is a type that statically associates a function
	// with a [MessageKind_TIMEOUT] value.
	MessageKind_TIMEOUT_Case struct{}
)

// Switch_MessageKind dispatches to a function based on the value of v.
//
// It invokes the function that corresponds to v. It panics if v is not a
// recognized [MessageKind] value.
func Switch_MessageKind(
	v MessageKind,
	caseUNKNOWN_MESSAGE_KIND func(MessageKind_UNKNOWN_MESSAGE_KIND_Case),
	caseCOMMAND func(MessageKind_COMMAND_Case),
	caseEVENT func(MessageKind_EVENT_Case),
	caseTIMEOUT func(MessageKind_TIMEOUT_Case),
) {
	switch v {
	case MessageKind_UNKNOWN_MESSAGE_KIND:
		caseUNKNOWN_MESSAGE_KIND(MessageKind_UNKNOWN_MESSAGE_KIND_Case{})
	case MessageKind_COMMAND:
		caseCOMMAND(MessageKind_COMMAND_Case{})
	case MessageKind_EVENT:
		caseEVENT(MessageKind_EVENT_Case{})
	case MessageKind_TIMEOUT:
		caseTIMEOUT(MessageKind_TIMEOUT_Case{})
	default:
		panic(fmt.Sprintf("Switch_MessageKind: %d is not a valid MessageKind", v))
	}
}

// Map_MessageKind maps a member of the [MessageKind] enumeration to a
// value of type T.
//
// It invokes the function that corresponds to v, and returns that function's
// result. It panics if v is not a recognized [MessageKind] value.
func Map_MessageKind[T any](
	v MessageKind,
	caseUNKNOWN_MESSAGE_KIND func(MessageKind_UNKNOWN_MESSAGE_KIND_Case) T,
	caseCOMMAND func(MessageKind_COMMAND_Case) T,
	caseEVENT func(MessageKind_EVENT_Case) T,
	caseTIMEOUT func(MessageKind_TIMEOUT_Case) T,
) T {
	switch v {
	case MessageKind_UNKNOWN_MESSAGE_KIND:
		return caseUNKNOWN_MESSAGE_KIND(MessageKind_UNKNOWN_MESSAGE_KIND_Case{})
	case MessageKind_COMMAND:
		return caseCOMMAND(MessageKind_COMMAND_Case{})
	case MessageKind_EVENT:
		return caseEVENT(MessageKind_EVENT_Case{})
	case MessageKind_TIMEOUT:
		return caseTIMEOUT(MessageKind_TIMEOUT_Case{})
	default:
		panic(fmt.Sprintf("Map_MessageKind: %d is not a valid MessageKind", v))
	}
}

type (
	// HandlerType_UNKNOWN_HANDLER_TYPE_Case is a type that statically associates a function
	// with a [HandlerType_UNKNOWN_HANDLER_TYPE] value.
	HandlerType_UNKNOWN_HANDLER_TYPE_Case struct{}
	// HandlerType_AGGREGATE_Case is a type that statically associates a function
	// with a [HandlerType_AGGREGATE] value.
	HandlerType_AGGREGATE_Case struct{}
	// HandlerType_PROCESS_Case is a type that statically associates a function
	// with a [HandlerType_PROCESS] value.
	HandlerType_PROCESS_Case struct{}
	// HandlerType_INTEGRATION_Case is a type that statically associates a function
	// with a [HandlerType_INTEGRATION] value.
	HandlerType_INTEGRATION_Case struct{}
	// HandlerType_PROJECTION_Case is a type that statically associates a function
	// with a [HandlerType_PROJECTION] value.
	HandlerType_PROJECTION_Case struct{}
)

// Switch_HandlerType dispatches to a function based on the value of v.
//
// It invokes the function that corresponds to v. It panics if v is not a
// recognized [HandlerType] value.
func Switch_HandlerType(
	v HandlerType,
	caseUNKNOWN_HANDLER_TYPE func(HandlerType_UNKNOWN_HANDLER_TYPE_Case),
	caseAGGREGATE func(HandlerType_AGGREGATE_Case),
	casePROCESS func(HandlerType_PROCESS_Case),
	caseINTEGRATION func(HandlerType_INTEGRATION_Case),
	casePROJECTION func(HandlerType_PROJECTION_Case),
) {
	switch v {
	case HandlerType_UNKNOWN_HANDLER_TYPE:
		caseUNKNOWN_HANDLER_TYPE(HandlerType_UNKNOWN_HANDLER_TYPE_Case{})
	case HandlerType_AGGREGATE:
		caseAGGREGATE(HandlerType_AGGREGATE_Case{})
	case HandlerType_PROCESS:
		casePROCESS(HandlerType_PROCESS_Case{})
	case HandlerType_INTEGRATION:
		caseINTEGRATION(HandlerType_INTEGRATION_Case{})
	case HandlerType_PROJECTION:
		casePROJECTION(HandlerType_PROJECTION_Case{})
	default:
		panic(fmt.Sprintf("Switch_HandlerType: %d is not a valid HandlerType", v))
	}
}

// Map_HandlerType maps a member of the [HandlerType] enumeration to a
// value of type T.
//
// It invokes the function that corresponds to v, and returns that function's
// result. It panics if v is not a recognized [HandlerType] value.
func Map_HandlerType[T any](
	v HandlerType,
	caseUNKNOWN_HANDLER_TYPE func(HandlerType_UNKNOWN_HANDLER_TYPE_Case) T,
	caseAGGREGATE func(HandlerType_AGGREGATE_Case) T,
	casePROCESS func(HandlerType_PROCESS_Case) T,
	caseINTEGRATION func(HandlerType_INTEGRATION_Case) T,
	casePROJECTION func(HandlerType_PROJECTION_Case) T,
) T {
	switch v {
	case HandlerType_UNKNOWN_HANDLER_TYPE:
		return caseUNKNOWN_HANDLER_TYPE(HandlerType_UNKNOWN_HANDLER_TYPE_Case{})
	case HandlerType_AGGREGATE:
		return caseAGGREGATE(HandlerType_AGGREGATE_Case{})
	case HandlerType_PROCESS:
		return casePROCESS(HandlerType_PROCESS_Case{})
	case HandlerType_INTEGRATION:
		return caseINTEGRATION(HandlerType_INTEGRATION_Case{})
	case HandlerType_PROJECTION:
		return casePROJECTION(HandlerType_PROJECTION_Case{})
	default:
		panic(fmt.Sprintf("Map_HandlerType: %d is not a valid HandlerType", v))
	}
}

// SetIdentity sets the x.Identity field to v, then returns x.
func (x *Application) SetIdentity(v *identitypb.Identity) {
	x.Identity = v
}

// SetGoType sets the x.GoType field to v, then returns x.
func (x *Application) SetGoType(v string) {
	x.GoType = v
}

// SetHandlers sets the x.Handlers field to v, then returns x.
func (x *Application) SetHandlers(v []*Handler) {
	x.Handlers = v
}

// SetIdentity sets the x.Identity field to v, then returns x.
func (x *Handler) SetIdentity(v *identitypb.Identity) {
	x.Identity = v
}

// SetGoType sets the x.GoType field to v, then returns x.
func (x *Handler) SetGoType(v string) {
	x.GoType = v
}

// SetType sets the x.Type field to v, then returns x.
func (x *Handler) SetType(v HandlerType) {
	x.Type = v
}

// SetProducedMessages sets the x.ProducedMessages field to v, then returns x.
func (x *Handler) SetProducedMessages(v map[string]MessageKind) {
	x.ProducedMessages = v
}

// SetConsumedMessages sets the x.ConsumedMessages field to v, then returns x.
func (x *Handler) SetConsumedMessages(v map[string]MessageKind) {
	x.ConsumedMessages = v
}

// SetIsDisabled sets the x.IsDisabled field to v, then returns x.
func (x *Handler) SetIsDisabled(v bool) {
	x.IsDisabled = v
}
